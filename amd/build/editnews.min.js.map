{"version":3,"file":"editnews.min.js","sources":["../src/editnews.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_wb_news\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\n\nconst SELECTORS = {\n    ALLINSTANCES: '[data-id=\"wb-news-all-instances-container\"]', // Via shortcodes, we can have more than one of these.\n    ADDEDITBUTTON: 'div.wb-news-addeditbutton',\n    DELETEBUTTON: 'div.wb-news-deletebutton',\n};\n\nexport const init = () => {\n    // eslint-disable-next-line no-console\n    console.log('run init');\n\n    // Cashout functionality.\n    const containers = document.querySelectorAll(SELECTORS.ALLINSTANCES);\n\n    // eslint-disable-next-line no-console\n    console.log('containers', containers);\n\n    containers.forEach(container => {\n\n        if (container.dataset.initialized) {\n            return;\n        }\n\n        container.dataset.initialized = 'true';\n\n        container.addEventListener('click', e => {\n            handleClickEvent(e);\n        });\n    });\n};\n\n\n/**\n * Handles the click event on the wb news container.\n *\n * @param {mixed} event\n *\n * @return void\n *\n */\nfunction handleClickEvent(event) {\n\n    // eslint-disable-next-line no-console\n    console.log(event.target);\n\n    // Get event target.\n    if (event.target && event.target.dataset.action) {\n\n        const action = event.target.dataset.action;\n\n        switch (action) {\n            case 'add':\n                addeditformModal(event.target);\n                break;\n            case 'edit':\n                addeditformModal(event.target);\n                break;\n            case 'delete':\n                deleteModal(event.target);\n                break;\n            case 'copy':\n                copyModal(event.target);\n                break;\n            default:\n                // eslint-disable-next-line no-console\n                console.log('Unknown action:', action);\n        }\n    }\n}\n\n/**\n * Show add edit form.\n * @param {htmlElement} button\n * @return [type]\n *\n */\nexport function addeditformModal(button) {\n\n    // eslint-disable-next-line no-console\n    console.log('button', button);\n\n    const id = button.dataset.id ? button.dataset.id : 0;\n    const instanceid = button.dataset.instanceid;\n    const isinstance = button.dataset.isinstance;\n\n    let formclass = \"local_wb_news\\\\form\\\\addeditmodal\";\n    if (isinstance == 'true') {\n        formclass = \"local_wb_news\\\\form\\\\addeditinstancemodal\";\n    }\n\n    var title = getString('addform', 'local_wb_news');\n    if (id > 0) {\n        title = getString('editform', 'local_wb_news');\n    }\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: formclass,\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {\n            id,\n            instanceid\n        },\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n        let anchor = `#instance-${instanceid}`;\n        location.href = `${location.origin}${location.pathname}${anchor}`;\n        location.reload();\n    });\n\n    // Show the form.\n    modalForm.show();\n\n}\n\n/**\n * Show add edit form.\n * @param {htmlElement} button\n * @return [type]\n *\n */\nexport function deleteModal(button) {\n\n    // eslint-disable-next-line no-console\n    console.log('button', button);\n\n    const id = button.dataset.id;\n    const instanceid = button.dataset.instanceid;\n    const isinstance = button.dataset.isinstance;\n\n    let formclass = \"local_wb_news\\\\form\\\\deletemodal\";\n    if (isinstance == 'true') {\n        formclass = \"local_wb_news\\\\form\\\\deleteinstancemodal\";\n    }\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: formclass,\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {\n            id,\n            instanceid\n        },\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('deletenewsitem', 'local_wb_news')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n        location.reload();\n    });\n\n    // Show the form.\n    modalForm.show();\n\n}\n\n/**\n * Copy form.\n * @param {htmlElement} button\n * @return [type]\n *\n */\nexport function copyModal(button) {\n\n    // eslint-disable-next-line no-console\n    console.log('button', button);\n\n    const id = button.dataset.id;\n    const instanceid = button.dataset.instanceid;\n    const isinstance = button.dataset.isinstance;\n\n    let formclass = \"local_wb_news\\\\form\\\\addeditmodal\";\n    if (isinstance == 'true') {\n        formclass = \"local_wb_news\\\\form\\\\addeditinstancemodal\";\n    }\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: formclass,\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {\n            id,\n            instanceid,\n            copy: 1\n        },\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('copyitem', 'local_wb_news')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n\n        location.reload();\n    });\n\n    // Show the form.\n    modalForm.show();\n\n}"],"names":["SELECTORS","addeditformModal","button","console","log","id","dataset","instanceid","formclass","isinstance","title","modalForm","ModalForm","formClass","args","modalConfig","returnFocus","addEventListener","events","FORM_SUBMITTED","anchor","location","href","origin","pathname","reload","show","deleteModal","copyModal","copy","containers","document","querySelectorAll","forEach","container","initialized","e","event","target","action","handleClickEvent"],"mappings":";;;;;+PAyBMA,uBACY,uDA0EFC,iBAAiBC,QAG7BC,QAAQC,IAAI,SAAUF,cAEhBG,GAAKH,OAAOI,QAAQD,GAAKH,OAAOI,QAAQD,GAAK,EAC7CE,WAAaL,OAAOI,QAAQC,eAG9BC,UAAY,oCACE,QAHCN,OAAOI,QAAQG,aAI9BD,UAAY,iDAGZE,OAAQ,mBAAU,UAAW,iBAC7BL,GAAK,IACLK,OAAQ,mBAAU,WAAY,wBAG5BC,UAAY,IAAIC,mBAAU,CAG5BC,UAAWL,UAEXM,KAAM,CACFT,GAAAA,GACAE,WAAAA,YAGJQ,YAAa,CAACL,MAAAA,OAEdM,YAAad,SAIjBS,UAAUM,iBAAiBN,UAAUO,OAAOC,gBAAgB,SACpDC,OAAU,aAAYb,aAC1Bc,SAASC,KAAQ,GAAED,SAASE,SAASF,SAASG,WAAWJ,SACzDC,SAASI,YAIbd,UAAUe,gBAUEC,YAAYzB,QAGxBC,QAAQC,IAAI,SAAUF,cAEhBG,GAAKH,OAAOI,QAAQD,GACpBE,WAAaL,OAAOI,QAAQC,eAG9BC,UAAY,mCACE,QAHCN,OAAOI,QAAQG,aAI9BD,UAAY,kDAGVG,UAAY,IAAIC,mBAAU,CAG5BC,UAAWL,UAEXM,KAAM,CACFT,GAAAA,GACAE,WAAAA,YAGJQ,YAAa,CAACL,OAAO,mBAAU,iBAAkB,kBAEjDM,YAAad,SAIjBS,UAAUM,iBAAiBN,UAAUO,OAAOC,gBAAgB,KACxDE,SAASI,YAIbd,UAAUe,gBAUEE,UAAU1B,QAGtBC,QAAQC,IAAI,SAAUF,cAEhBG,GAAKH,OAAOI,QAAQD,GACpBE,WAAaL,OAAOI,QAAQC,eAG9BC,UAAY,oCACE,QAHCN,OAAOI,QAAQG,aAI9BD,UAAY,mDAGVG,UAAY,IAAIC,mBAAU,CAG5BC,UAAWL,UAEXM,KAAM,CACFT,GAAAA,GACAE,WAAAA,WACAsB,KAAM,GAGVd,YAAa,CAACL,OAAO,mBAAU,WAAY,kBAE3CM,YAAad,SAIjBS,UAAUM,iBAAiBN,UAAUO,OAAOC,gBAAgB,KAExDE,SAASI,YAIbd,UAAUe,qBA3MM,KAEhBvB,QAAQC,IAAI,kBAGN0B,WAAaC,SAASC,iBAAiBhC,wBAG7CG,QAAQC,IAAI,aAAc0B,YAE1BA,WAAWG,SAAQC,YAEXA,UAAU5B,QAAQ6B,cAItBD,UAAU5B,QAAQ6B,YAAc,OAEhCD,UAAUjB,iBAAiB,SAASmB,cAelBC,UAGtBlC,QAAQC,IAAIiC,MAAMC,QAGdD,MAAMC,QAAUD,MAAMC,OAAOhC,QAAQiC,OAAQ,OAEvCA,OAASF,MAAMC,OAAOhC,QAAQiC,cAE5BA,YACC,UAGA,OACDtC,iBAAiBoC,MAAMC,kBAEtB,SACDX,YAAYU,MAAMC,kBAEjB,OACDV,UAAUS,MAAMC,sBAIhBnC,QAAQC,IAAI,kBAAmBmC,UAvCnCC,CAAiBJ"}